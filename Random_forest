from sklearn.datasets import fetch_olivetti_faces
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt

dataset = fetch_olivetti_faces()

plt.figure()
for i in range(2):
    plt.subplot(1, 2, i+1)
    plt.imshow(dataset.images[i], cmap = "gray")
    plt.axis("off")
    
plt.show()


X = dataset.data
y = dataset.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

classifier = RandomForestClassifier(n_estimators=100, random_state=42)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)

print("Accuracy: ", accuracy)

k_values = []
acc_values = []

for i in range(1, 201, 40):
    classifier = RandomForestClassifier(n_estimators=i, random_state=42)
    classifier.fit(X_train, y_train)
    y_pred = classifier.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    acc_values.append(accuracy)
    k_values.append(i)
    
plt.figure()
plt.plot(k_values, acc_values, marker = "o", linestyle = "-")
plt.title("Accuracy based on estimators")
plt.xlabel("estimator numbers")
plt.ylabel("Accuracy")
plt.xticks(k_values)
plt.grid(True)

#%%
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np

dataset = fetch_california_housing()

X = dataset.data
y = dataset.target


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

regressor = RandomForestRegressor(random_state=42)
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
print("RMSE: ", rmse)










